// Copyright (c) 2024 Steven Rosenthal smr@dt3.org
// See LICENSE file in root directory for license terms.

syntax = "proto3";

package tetra3_server;

import "google/protobuf/duration.proto";

// This is a copy of tetra3.proto from the smroid/tetra3_server project on
// github. TODO(smr): avoid this copy.

// See documentation for Tetra3's solve_from_centroids() function for a
// description of the request and response fields.

message SolveRequest {
  repeated ImageCoord star_centroids = 1;
  // The 'size' parameter, in pixels.
  int32 image_width = 2;
  int32 image_height = 3;
  optional float fov_estimate = 4;
  optional float fov_max_error = 5;
  optional float match_radius = 7;
  optional float match_threshold = 8;
  optional google.protobuf.Duration solve_timeout = 13;
  repeated ImageCoord target_pixels = 9;
  repeated CelestialCoord target_sky_coords = 14;
  optional float distortion = 10;  // We don't support min/max.
  bool return_matches = 11;
  optional float match_max_error = 12;
}

enum SolveStatus {
  UNSPECIFIED = 0;

  MATCH_FOUND = 1;
  NO_MATCH = 2;  // No match was found after exhausive search.
  TIMEOUT = 3;  // 'solve_timeout' was reached before a match could be found.
  CANCELLED = 4;  // Solve was cancelled before a match could be found.
  TOO_FEW = 5;  // Too few 'star_centroids' were supplied so matching was not attempted.
}

message SolveResult {
  optional CelestialCoord image_center_coords = 1;
  optional float roll = 2;
  optional float fov = 3;
  optional float distortion = 4;
  optional float rmse = 5;
  optional int32 matches = 6;
  optional float prob = 7;
  optional float epoch_equinox = 8;
  optional float epoch_proper_motion = 9;
  google.protobuf.Duration solve_time = 10;
  optional float cache_hit_fraction = 11;

  // Celestial coordinates of SolveRequest.target_pixels.
  repeated CelestialCoord target_coords = 12;

  // Image coordinates of SolveRequest.target_sky_coords. If a request's
  // target_sky_coords entry is outside of the FOV, the corresponding
  // entry here will be (-1,-1).
  repeated ImageCoord target_sky_to_image_coords = 15;

  repeated MatchedStar matched_stars = 13;
  repeated ImageCoord pattern_centroids = 16;

  // If SolveFromCentroids() fails, all of the SolveResult fields will be
  // omitted except for 'solve_time' and 'status', and the reason for the
  // failure will be given here.
  optional SolveStatus status = 14;
}

// A location in full resolution image coordinates. (0.5, 0.5) corresponds to
// the center of the image's upper left pixel.
message ImageCoord {
  float x = 1;
  float y = 2;
}

message CelestialCoord {
  float ra = 1;  // Degrees, 0..360.
  float dec = 2;  // Degrees, -90..90.
}

message MatchedStar {
  CelestialCoord celestial_coord = 1;
  float magnitude = 2;
  ImageCoord image_coord = 3;
  optional string cat_id = 4;
}

service Tetra3 {
  // The gRPC deadline is ignored; instead use SolveRequest.solve_timeout.
  rpc SolveFromCentroids(SolveRequest) returns (SolveResult);
}
