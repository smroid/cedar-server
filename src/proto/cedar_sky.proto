// Copyright (c) 2024 Steven Rosenthal smr@dt3.org
// See LICENSE file in root directory for license terms.

syntax = "proto3";

import "tetra3.proto";

package cedar_sky;

// Describes various constraints that must all be satisfied for a sky catalog
// entry to be returned by QueryCatalogEntries() RPC.
message QueryCatalogRequest {
  // Constraints relative to information about the sky objects themselves.
  CatalogEntryMatch catalog_entry_match = 1;

  // Distance from the current telescope boresight position in the sky. Requires
  // that Cedar has a plate solution.
  optional double max_distance = 2;  // Degrees.

  // Elevation relative to the current horizon. Requires that Cedar knows the
  // observer location and current time.
  optional double min_elevation = 3;  // Degrees; requires `location_info`

  // If two objects from different catalogs satisfy the criteria, and are
  // within this angular distance of each other, only one is returned. The
  // object from the smaller catalog is returned, so for example two objects are
  // being returned and are within the `dedup_distance`, the entry from the
  // Messier catalog is returned instead of the entry from the NGC catalog.
  // If omitted, no deduping is done.
  optional double dedup_distance = 4;  // Arcsec.

  // If two objects from the same catalog satisfy the criteria, and are
  // within this angular distance of each other, only one is returned. The
  // brighter object is returned. If omitted, no decrowding is done.
  // If both `dedup_distance` and `decrowd_distance` are given, the dedup
  // distance must be less than the decrowd distance value.
  optional double decrowd_distance = 5;  // Arcsec.

  optional Ordering ordering = 6;  // Default is to order by brightness.

  // If given, caps the number of `entries` in QueryCatalogResponse.
  optional int32 limit_result = 7;

  // TODO: text search.
}

// Specifies what intrinsic criteria to apply when matching catalog entries.
message CatalogEntryMatch {
  // Limiting magnitude. If provided, objects fainter than the limit are
  // excluded.
  optional int32 faintest_magnitude = 1;

  // What catalog(s) to search. Note: if empty, queries will return no results.
  repeated string catalog_label = 2;

  // What object type(s) to search. Note: if empty, queries will return no
  // results.
  repeated string object_type_label = 3;
}

enum Ordering {
  UNSPECIFIED = 0;

  // Brightest first.
  BRIGHTNESS = 1;

  // `sky_location` must be present. Closest first.
  SKY_LOCATION = 2;

  // `location_info` must be present. Highest first.
  ELEVATION = 3;

  // TODO: MARATHON: time until setting to within min_elevation.
}

message QueryCatalogResponse {
  // The catalog entries that satisfy the QueryCatalogRequest criteria.
  repeated SelectedCatalogEntry entries = 1;

  // If `limit_result` is specified in QueryCatalogRequest, this will
  // be the number of entries that were truncated after the limit was
  // reached.
  int32 truncated_count = 2;
}

message SelectedCatalogEntry {
  CatalogEntry entry = 1;

  // Other entries, if any, that were suppressed due to `dedup_distance` in the
  // QueryCatalogRequest.
  repeated CatalogEntry deduped_entries = 2;

  // Other entries, if any, that were suppressed due to `decrowd_distance` in
  // the QueryCatalogRequest.
  repeated CatalogEntry decrowded_entries = 3;
}

message CatalogEntry {
  // These two fields combine to be globally unique entry label, e.g. 'M51',
  // 'NGC3982'.
  string catalog_label = 1;  // M, NGC, etc.
  string catalog_entry = 2;  // 51, 3982, etc.

  tetra3_server.CelestialCoord coord = 3;
  optional Constellation constellation = 4;
  ObjectType object_type = 5;

  double magnitude = 6;  // Apparent magnitude.
  optional string angular_size = 7;  // Arc minutes. Usually numeric.

  optional string common_name = 8;  // Albireo, Horsehead, Crab Nebula, etc.
  optional string notes = 9;
}

message CatalogDescription {
  string label = 1;  // M, NGC, etc.
  string name = 2;  // Messier, New General Catalog, etc.
  string description = 3;
  string source = 4;
  optional string copyright = 5;
  optional string license = 6;
}

message CatalogDescriptionResponse {
  repeated CatalogDescription catalog_descriptions = 1;
}

message ObjectType {
  string label = 1;  // Nebula, galaxy, double star, etc.
  string broad_category = 2;  // e.g. 'cluster', whereas label might be
                              // 'open cluster' or 'globular cluster' etc.
}

message ObjectTypeResponse {
  repeated ObjectType object_types = 1;
}

message Constellation {
  string label = 1;  // e.g. Psc.
  string name = 2;  // e.g. Pisces.
}

message ConstellationResponse {
  repeated Constellation constellations = 1;
}
