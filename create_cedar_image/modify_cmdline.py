#!/usr/bin/env python3
import os
import shutil

# Generated by Anthropic Claude.

class CmdlineEditor:
    def __init__(self, boot_path):
        self.cmdline_path = os.path.join(boot_path, 'cmdline.txt')
        if not os.path.exists(self.cmdline_path):
            raise FileNotFoundError(f"cmdline.txt not found at {self.cmdline_path}")

    def _read_cmdline(self):
        """Read current cmdline parameters into a list"""
        with open(self.cmdline_path, 'r') as f:
            content = f.read().strip()
        return content.split()

    def _write_cmdline(self, params):
        """Write parameters back to cmdline.txt"""
        # Create backup first
        shutil.copy2(self.cmdline_path, f"{self.cmdline_path}.bak")

        # Write new content
        with open(self.cmdline_path, 'w') as f:
            f.write(' '.join(params) + '\n')

    def add_params(self, *params):
        """Add one or more parameters to cmdline.txt"""
        current_params = self._read_cmdline()

        # Add new params if they don't exist
        for param in params:
            # Handle params with = signs specially
            param_name = param.split('=')[0] if '=' in param else param

            # Remove existing version if present
            current_params = [p for p in current_params
                            if not (p == param_name or
                                  p.startswith(f"{param_name}="))]

            current_params.append(param)

        self._write_cmdline(current_params)
        print(f"Added parameters: {params}")

    def remove_params(self, *params):
        """Remove one or more parameters from cmdline.txt"""
        current_params = self._read_cmdline()

        for param in params:
            # Handle both full parameters and parameter names (before =)
            current_params = [p for p in current_params
                            if not (p == param or
                                  p.split('=')[0] == param)]

        self._write_cmdline(current_params)
        print(f"Removed parameters: {params}")

    def show_current(self):
        """Display current cmdline parameters"""
        params = self._read_cmdline()
        print("Current cmdline parameters:")
        for param in params:
            print(f"  {param}")

def main():
    BOOT_PATH = "/mnt/part1"

    try:
        editor = CmdlineEditor(BOOT_PATH)

        # Example usage:
        editor.show_current()

        # Add parameters
        editor.add_params('video=HDMI-A-1:1920x1080M@60,rotate=0')
        editor.add_params('cfg80211.ieee80211_regdom=US')

        # Remove parameters
        editor.remove_params('quiet')

        editor.show_current()

    except Exception as e:
        print(f"Error: {e}")
        exit(1)

if __name__ == "__main__":
    main()
