#!/usr/bin/env python3
import subprocess
import sys
import logging
from pathlib import Path
import random
import time

# Generated by Anthropic Claude.

# This script is to be copied onto the target at its
# /usr/local/sbin/cedar-ap-setup.py

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/cedar-ap-setup.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

def get_serial_number():
    """Get the Raspberry Pi serial number, trying multiple methods."""
    try:
        # Try /proc/cpuinfo first
        with open('/proc/cpuinfo', 'r') as f:
            for line in f:
                if line.startswith('Serial'):
                    serial = line.split(':')[1].strip()
                    logging.info(f"Found serial number: {serial}")
                    return serial[-3:]  # Last 3 chars

        logging.error("Could not find serial number by any method")
        return None

    except Exception as e:
        logging.error(f"Error getting serial number: {e}")
        return None

def setup_access_point():
    """Configure and enable the WiFi access point."""
    serial_suffix = get_serial_number()
    if not serial_suffix:
        logging.error("Failed to get serial number - cannot continue")
        return False

    new_ssid = f"cedar-{serial_suffix}"
    channel = random.choice([1, 6, 11])  # Randomly select channel
    logging.info(f"Setting up access point with SSID: {new_ssid} on channel {channel}")

    try:
        # Stop and disable dnsmasq
        subprocess.run(['systemctl', 'disable', 'dnsmasq'], check=False)
        subprocess.run(['systemctl', 'stop', 'dnsmasq'], check=False)

        # Complete reset of NetworkManager
        logging.info("Resetting NetworkManager completely")
        subprocess.run(['systemctl', 'stop', 'NetworkManager'], check=True)
        subprocess.run(['rm', '-f', '/var/lib/NetworkManager/NetworkManager.state'],
                       check=True)
        subprocess.run(
            ['rm', '-f', '/etc/NetworkManager/system-connections/cedar-ap.nmconnection'],
            check=False)
        subprocess.run(['rm', '-rf', '/var/lib/NetworkManager/'], check=False)

        # Make sure WiFi is unblocked and up
        logging.info("Ensuring WiFi is unblocked and up")
        subprocess.run(['rfkill', 'unblock', 'all'], check=True)
        subprocess.run(['ip', 'link', 'set', 'wlan0', 'up'], check=True)

        # Add IP address to ensure interface is working
        logging.info("Setting manual IP to ensure interface is working")
        subprocess.run(['ip', 'addr', 'add', '192.168.4.1/24', 'dev', 'wlan0'], check=False)

        # Start NetworkManager fresh
        logging.info("Starting NetworkManager")
        subprocess.run(['systemctl', 'start', 'NetworkManager'], check=True)
        time.sleep(5)

        # Create AP connection with all parameters at once
        logging.info(f"Creating access point with SSID {new_ssid}")
        subprocess.run([
            'nmcli', 'con', 'add', 'type', 'wifi', 'ifname', 'wlan0', 'mode', 'ap',
            'con-name', 'cedar-ap', 'ssid', new_ssid,
            'ipv4.method', 'shared', 'ipv4.addresses', '192.168.4.1/24',
            'ipv6.method', 'disabled',
            '802-11-wireless.band', 'bg', '802-11-wireless.channel', str(channel),
            'wifi-sec.key-mgmt', 'wpa-psk', 'wifi-sec.psk', 'cedar123',
            'connection.autoconnect', 'true'
        ], check=True)

        # Try to bring up the connection
        logging.info("Activating access point")
        result = subprocess.run(['nmcli', 'con', 'up', 'cedar-ap'],
                                capture_output=True, text=True)

        if result.returncode != 0:
            logging.error(f"Error bringing up access point: {result.stderr}")
            return False

        # Create flag file to indicate successful setup
        Path('/etc/cedar-ap-configured').touch()
        logging.info("Access point setup completed successfully")
        return True

    except subprocess.CalledProcessError as e:
        logging.error(f"Command failed: {e}")
        return False
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        return False


if __name__ == '__main__':
    logging.info("Starting cedar-ap setup script")
    if setup_access_point():
        sys.exit(0)
    else:
        sys.exit(1)
