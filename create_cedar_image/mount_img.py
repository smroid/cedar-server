#!/usr/bin/env python3
import subprocess
import os
import re
import sys

# Generated by Anthropic Claude.

class ImageMounter:
    def __init__(self, image_path):
        self.image_path = image_path
        self.loop_devices = []
        self.mount_points = ["/mnt/part1", "/mnt/part2"]

    def setup_loop_devices(self):
        """Run kpartx and capture the loop device names"""
        try:
            result = subprocess.run(['sudo', 'kpartx', '-v', '-a', self.image_path],
                                    capture_output=True, text=True, check=True)

            # Parse kpartx output to get loop devices
            # Example output line: "add map loop5p1 (253:0): 0 524288 linear 7:5 8192"
            loop_matches = re.finditer(r'add map (loop\dp\d)', result.stdout)
            self.loop_devices = [match.group(1) for match in loop_matches]

            if len(self.loop_devices) != 2:
                raise RuntimeError(f"Expected 2 partitions, found {len(self.loop_devices)}")

            print(f"Created loop devices: {', '.join(self.loop_devices)}")
            return True

        except subprocess.CalledProcessError as e:
            print(f"Error running kpartx: {e}")
            print(f"kpartx stderr: {e.stderr}")
            return False

    def mount_partitions(self, readonly):
        """Mount the partitions at specified mount points"""
        try:
            # Create mount points if they don't exist

            for mount_point in self.mount_points:
                os.makedirs(mount_point, exist_ok=True)

            # Mount the partitions
            for loop_dev, mount_point in zip(self.loop_devices, self.mount_points):
                dev_path = f"/dev/mapper/{loop_dev}"
                if readonly:
                    subprocess.run(['sudo', 'mount', '-r', dev_path, mount_point], check=True)
                else:
                    subprocess.run(['sudo', 'mount', dev_path, mount_point], check=True)
                print(f"Mounted {dev_path} at {mount_point}")

            return True

        except subprocess.CalledProcessError as e:
            print(f"Error mounting partitions: {e}")
            return False
        except Exception as e:
            print(f"Unexpected error while mounting: {e}")
            return False

    def cleanup(self):
        """Unmount everything and remove loop devices"""
        # Unmount in reverse order
        for mount_point in reversed(self.mount_points):
            if os.path.ismount(mount_point):
                try:
                    subprocess.run(['sudo', 'umount', mount_point], check=True)
                    print(f"Unmounted {mount_point}")
                except subprocess.CalledProcessError as e:
                    print(f"Error unmounting {mount_point}: {e}")

        # Remove loop devices
        try:
            subprocess.run(['sudo', 'kpartx', '-d', self.image_path], check=True)
            print("Removed loop devices")
        except subprocess.CalledProcessError as e:
            print(f"Error removing loop devices: {e}")

def main():
    # Check for sudo privileges first
    if os.geteuid() != 0:
        print("This script must be run with sudo")
        sys.exit(1)

    # Remove script name from args
    args = sys.argv[1:]

    # Check for readonly flag
    readonly_mode = False
    if '--readonly' in args:
        readonly_mode = True
        args.remove('--readonly')

    # Check for cleanup flag
    cleanup_mode = False
    if '--cleanup' in args:
        cleanup_mode = True
        args.remove('--cleanup')

    # Check remaining arguments
    if len(args) != 1:
        print("Usage: sudo python3 mount_img.py [--cleanup] <image_file>")
        sys.exit(1)

    image_path = args[0]
    if not os.path.exists(image_path):
        print(f"Image file {image_path} not found")
        sys.exit(1)

    mounter = ImageMounter(image_path)

    if not cleanup_mode:
        try:
            if not mounter.setup_loop_devices():
                sys.exit(1)

            if not mounter.mount_partitions(readonly_mode):
                mounter.cleanup()
                sys.exit(1)

            print("\nMounting completed successfully!")
            print("Loop devices:", mounter.loop_devices)
            print("Mount points:", mounter.mount_points)
            print("\nTo unmount when finished, run:")
            print(f"sudo python3 {sys.argv[0]} --cleanup {image_path}")

        except KeyboardInterrupt:
            print("\nOperation interrupted by user")
            mounter.cleanup()
            sys.exit(1)
    else:
        # Handle cleanup mode
        mounter.cleanup()
        sys.exit(0)

if __name__ == "__main__":
    main()
