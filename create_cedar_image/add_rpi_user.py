#!/usr/bin/env python3
import os
import subprocess
import crypt
import shutil
from pathlib import Path

# Generated by Anthropic Claude.

def generate_password_hash(password):
    """Generate a SHA-512 password hash."""
    # Using SHA-512 method
    return crypt.crypt(password, crypt.mksalt(crypt.METHOD_SHA512))

def add_user_to_passwd(rootfs_path, username, uid, gid):
    """Add user entry to /etc/passwd file."""
    passwd_path = os.path.join(rootfs_path, 'etc/passwd')
    entry = f"{username}:x:{uid}:{gid}:,,,:/home/{username}:/bin/bash\n"

    with open(passwd_path, 'a') as f:
        f.write(entry)

def add_user_to_shadow(rootfs_path, username, password_hash):
    """Add user entry to /etc/shadow file."""
    shadow_path = os.path.join(rootfs_path, 'etc/shadow')
    entry = f"{username}:{password_hash}:19755:0:99999:7:::\n"

    with open(shadow_path, 'a') as f:
        f.write(entry)

def add_user_group(rootfs_path, username, gid):
    """Add primary user group entry to /etc/group."""
    group_path = os.path.join(rootfs_path, 'etc/group')
    entry = f"{username}:x:{gid}:\n"

    with open(group_path, 'a') as f:
        f.write(entry)

def add_user_to_supplementary_groups(rootfs_path, username):
    """Add user to standard Raspberry Pi supplementary groups."""
    groups = [
        'adm', 'dialout', 'cdrom', 'sudo', 'audio', 'video',
        'plugdev', 'games', 'users', 'input', 'render',
        'netdev', 'gpio', 'i2c', 'spi'
    ]

    group_file = os.path.join(rootfs_path, 'etc/group')

    with open(group_file, 'r') as f:
        lines = f.readlines()

    modified_lines = []
    for line in lines:
        parts = line.strip().split(':')
        if parts[0] in groups:
            if len(parts) >= 4 and parts[3]:
                # Group already has members
                members = parts[3].split(',')
                if username not in members:
                    members.append(username)
                    parts[3] = ','.join(members)
            else:
                # Group has no members yet
                parts[3] = username
            line = ':'.join(parts) + '\n'
        modified_lines.append(line)

    with open(group_file, 'w') as f:
        f.writelines(modified_lines)

def create_home_directory(rootfs_path, username, uid, gid):
    """Create and setup home directory for the new user."""
    home_path = os.path.join(rootfs_path, f'home/{username}')
    skel_path = os.path.join(rootfs_path, 'etc/skel')

    # Create home directory
    os.makedirs(home_path, exist_ok=True)

    # Copy skel files
    for item in os.listdir(skel_path):
        s = os.path.join(skel_path, item)
        d = os.path.join(home_path, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, dirs_exist_ok=True)
        else:
            shutil.copy2(s, d)

    # Set ownership
    for root, dirs, files in os.walk(home_path):
        for d in dirs:
            os.chown(os.path.join(root, d), uid, gid)
        for f in files:
            os.chown(os.path.join(root, f), uid, gid)

    os.chown(home_path, uid, gid)
    os.chmod(home_path, 0o755)

def configure_sudo_nopasswd(rootfs_path, username):
    """Configure sudo to not require password for the user."""
    sudoers_dir = os.path.join(rootfs_path, 'etc/sudoers.d')
    sudo_file = os.path.join(sudoers_dir, f'010_{username}-nopasswd')

    # Ensure the directory exists
    os.makedirs(sudoers_dir, exist_ok=True)

    # Create the sudoers file
    with open(sudo_file, 'w') as f:
        f.write(f'{username} ALL=(ALL) NOPASSWD: ALL\n')

    # Set correct permissions (440)
    os.chmod(sudo_file, 0o440)
    print(f"Configured NOPASSWD sudo access for {username}")

def add_user(rootfs_path, username, password, uid, gid):
    """Add a new user to the mounted Raspberry Pi image."""
    if not os.path.isdir(rootfs_path):
        raise ValueError(f"Root filesystem path {rootfs_path} does not exist")

    print(f"Creating user {username}")

    # Generate password hash
    password_hash = generate_password_hash(password)

    # Add user entries to system files
    add_user_to_passwd(rootfs_path, username, uid, gid)
    print("Added user to passwd file")

    add_user_to_shadow(rootfs_path, username, password_hash)
    print("Added user to shadow file")

    add_user_group(rootfs_path, username, gid)
    print("Created primary group")

    add_user_to_supplementary_groups(rootfs_path, username)
    print("Added user to supplementary groups")

    # Setup home directory
    create_home_directory(rootfs_path, username, uid, gid)
    print("Created home directory")

    # Configure sudo without password
    configure_sudo_nopasswd(rootfs_path, username)
    print("Configured sudo access")

def main():
    ROOTFS_PATH = "/mnt/part2"
    USERNAME = "cedar"
    PASSWORD = "cedar"
    UID = 1001
    GID = 1001

    try:
        add_user(ROOTFS_PATH, USERNAME, PASSWORD, UID, GID)
        print(f"Successfully added user {USERNAME}")
    except Exception as e:
        print(f"Error adding user: {e}")

if __name__ == "__main__":
    main()
